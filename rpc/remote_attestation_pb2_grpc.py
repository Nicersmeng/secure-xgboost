# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import remote_attestation_pb2 as remote__attestation__pb2


class RemoteAttestationStub(object):
  """Interface exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetAttestation = channel.unary_unary(
        '/remote_attestation.RemoteAttestation/GetAttestation',
        request_serializer=remote__attestation__pb2.Status.SerializeToString,
        response_deserializer=remote__attestation__pb2.Report.FromString,
        )
    self.SendKey = channel.unary_unary(
        '/remote_attestation.RemoteAttestation/SendKey',
        request_serializer=remote__attestation__pb2.DataMetadata.SerializeToString,
        response_deserializer=remote__attestation__pb2.Status.FromString,
        )
    self.SendDMatrixAttrs = channel.unary_unary(
        '/remote_attestation.RemoteAttestation/SendDMatrixAttrs',
        request_serializer=remote__attestation__pb2.DMatrixAttrs.SerializeToString,
        response_deserializer=remote__attestation__pb2.Name.FromString,
        )
    self.SendBoosterAttrs = channel.unary_unary(
        '/remote_attestation.RemoteAttestation/SendBoosterAttrs',
        request_serializer=remote__attestation__pb2.BoosterAttrs.SerializeToString,
        response_deserializer=remote__attestation__pb2.Name.FromString,
        )
    self.SignalStart = channel.unary_unary(
        '/remote_attestation.RemoteAttestation/SignalStart',
        request_serializer=remote__attestation__pb2.Status.SerializeToString,
        response_deserializer=remote__attestation__pb2.Predictions.FromString,
        )
    self.BoosterUpdate = channel.unary_unary(
        '/remote_attestation.RemoteAttestation/BoosterUpdate',
        request_serializer=remote__attestation__pb2.BoosterUpdateParams.SerializeToString,
        response_deserializer=remote__attestation__pb2.Status.FromString,
        )
    self.SignalStartCluster = channel.unary_unary(
        '/remote_attestation.RemoteAttestation/SignalStartCluster',
        request_serializer=remote__attestation__pb2.ClusterParams.SerializeToString,
        response_deserializer=remote__attestation__pb2.Status.FromString,
        )
    self.Predict = channel.unary_unary(
        '/remote_attestation.RemoteAttestation/Predict',
        request_serializer=remote__attestation__pb2.PredictParams.SerializeToString,
        response_deserializer=remote__attestation__pb2.Predictions.FromString,
        )


class RemoteAttestationServicer(object):
  """Interface exported by the server.
  """

  def GetAttestation(self, request, context):
    """A simple RPC.

    Get attestation report

    Status is a just a dummy argument and won't be used by the server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SendKey(self, request, context):
    """A simple RPC.

    Send symmetric key encrypted with enclave public key, signature,
    and name of file encrypted with symmetric key to server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SendDMatrixAttrs(self, request, context):
    """A simple RPC.

    Send params of a DMatrix to the server for initialization
    Returns the name of the DMatrix assigned to this booster
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SendBoosterAttrs(self, request, context):
    """A simple RPC.

    Send params of a Booster to the server for initialization 
    Returns the name of the handle assigned to this booster
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignalStart(self, request, context):
    """A simple RPC.

    Signal to RPC server that the client is ready
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BoosterUpdate(self, request, context):
    """A simple RPC.

    Signal to RPC server that the client is ready
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SignalStartCluster(self, request, context):
    """A simple RPC.

    Signal to RPC server that the client is ready for distributed training
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RemoteAttestationServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetAttestation': grpc.unary_unary_rpc_method_handler(
          servicer.GetAttestation,
          request_deserializer=remote__attestation__pb2.Status.FromString,
          response_serializer=remote__attestation__pb2.Report.SerializeToString,
      ),
      'SendKey': grpc.unary_unary_rpc_method_handler(
          servicer.SendKey,
          request_deserializer=remote__attestation__pb2.DataMetadata.FromString,
          response_serializer=remote__attestation__pb2.Status.SerializeToString,
      ),
      'SendDMatrixAttrs': grpc.unary_unary_rpc_method_handler(
          servicer.SendDMatrixAttrs,
          request_deserializer=remote__attestation__pb2.DMatrixAttrs.FromString,
          response_serializer=remote__attestation__pb2.Name.SerializeToString,
      ),
      'SendBoosterAttrs': grpc.unary_unary_rpc_method_handler(
          servicer.SendBoosterAttrs,
          request_deserializer=remote__attestation__pb2.BoosterAttrs.FromString,
          response_serializer=remote__attestation__pb2.Name.SerializeToString,
      ),
      'SignalStart': grpc.unary_unary_rpc_method_handler(
          servicer.SignalStart,
          request_deserializer=remote__attestation__pb2.Status.FromString,
          response_serializer=remote__attestation__pb2.Predictions.SerializeToString,
      ),
      'BoosterUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.BoosterUpdate,
          request_deserializer=remote__attestation__pb2.BoosterUpdateParams.FromString,
          response_serializer=remote__attestation__pb2.Status.SerializeToString,
      ),
      'SignalStartCluster': grpc.unary_unary_rpc_method_handler(
          servicer.SignalStartCluster,
          request_deserializer=remote__attestation__pb2.ClusterParams.FromString,
          response_serializer=remote__attestation__pb2.Status.SerializeToString,
      ),
      'Predict': grpc.unary_unary_rpc_method_handler(
          servicer.Predict,
          request_deserializer=remote__attestation__pb2.PredictParams.FromString,
          response_serializer=remote__attestation__pb2.Predictions.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'remote_attestation.RemoteAttestation', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
